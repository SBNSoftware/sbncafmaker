#include "CAFMaker.fcl"

#include "services_common_icarus.fcl"
#include "geometry_icarus.fcl"

#include "larproperties.fcl"
#include "backtrackerservice.fcl"
#include "detectorproperties_icarus.fcl"
#include "particleinventoryservice.fcl"
#include "photonbacktrackerservice.fcl"
#include "mccheatermodules.fcl"

#include "calorimetry_icarus.fcl"

#include "eventweight_genie3_sbn_A.fcl"
#include "mcreco.fcl"
#include "mcsproducer.fcl"
#include "rangeproducer.fcl"
#include "crthitconverter_producer.fcl"
#include "pmtflashtrigger_producer.fcl"
#include "flashmatch_simple_icarus.fcl"

process_name: CAFmaker

services:
{
  # Load the service that manages root files for histograms.
#  scheduler:    {wantTracer : false wantSummary : false}
  TimeTracker: {}
  RandomNumberGenerator: {} #ART native random number generator
  TFileService: { fileName: "fullchain_production_hist_prod5.root" closeFileFast: false }
#  scheduler:    { wantTracer: false wantSummary: true }
  message:      { debugModules: ["*"] destinations: { debugmsg:{type: "cout" threshold: "INFO"} } }
  TimeTracker:  { printSummary: true }
  # #  @table::standard_services

  AuxDetExptGeoHelperInterface: { service_provider: "icaruscode/CRT/CRTGeometryHelper" }
  ExptGeoHelperInterface:    @local::icarus_split_induction_geometry_helper 
  GeometryConfigurationWriter: {}
  Geometry:                  @local::icarus_split_induction_nooverburden_geometry 
  # AuxDetGeometry:            @local::icarus_auxdetgeo
  LArPropertiesService:      @local::standard_properties
  DetectorClocksService:     @local::icarus_basic_services.DetectorClocksService
  DetectorPropertiesService: @local::icarus_basic_services.DetectorPropertiesService 
  ParticleInventoryService:  @local::standard_particleinventoryservice
  BackTrackerService:        @local::standard_backtrackerservice
  NuRandomService: {
    policy: perEvent
  }
}

# services.IFBeam: {}
# services.BackTracker: @local::standard_backtracker

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}

outputs:
{
  outpid:
  {
    dataTier: cafana # for grid test
    streamName: out1 # for grid test
    module_type: RootOutput
    fileName:    "pid_r%r_s%s.root"
    fastCloning: false
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:{
   mcreco: @local::standard_mcreco
   flashtrig: @local::pmtflashtrigmaker_icarus
   fmatchCryo0: @local::icarus_simple_flashmatch_0
   fmatchCryo1: @local::icarus_simple_flashmatch_1   # flashmatch_1 and flashmatch_0 are idently atm
   pandoraTrackMCSCryo0: @local::mcs_sbn
   pandoraTrackMCSCryo1: @local::mcs_sbn
   pandoraTrackRangeCryo0: @local::range_sbn
   pandoraTrackRangeCryo1: @local::range_sbn
   crtconvhit: @local::crthitconverter_icarus
   rns: { module_type: "RandomNumberSaver" }
   genieweight: @local::sbn_genie_eventweight
}
  filters:{
    flashtrigfilter: @local::pmtflashtrigfilter_icarus
  }
  analyzers:
  {
#    metadata: @local::standard_metadata            #prod
  }
 runprod: [ mcreco,
    flashtrig, flashtrigfilter,
    fmatchCryo0, fmatchCryo1,
    pandoraTrackMCSCryo0, pandoraTrackMCSCryo1, 
    pandoraTrackRangeCryo0, pandoraTrackRangeCryo1,
    rns, genieweight,
    mycafmaker ]

# makecaf: [mycafmaker] #list the modules for this path, order matters, filters reject all following items
# stream1: [metadata]
  stream1:       [  ]
  trigger_paths: [ runprod ] 
  end_paths:     [ stream1 ]


}

physics.producers.mycafmaker: @local::standard_cafmaker
physics.producers.mycafmaker.PandoraTagSuffixes: ["Cryo0", "Cryo1"]
physics.producers.mycafmaker.HitLabel: "cluster3D"
physics.producers.mycafmaker.PFParticleLabel:   "pandoraGaus"
physics.producers.mycafmaker.RecoShowerLabel:   "SBNShowerGaus"
physics.producers.mycafmaker.RecoTrackLabel:    "pandoraTrackGaus"
physics.producers.mycafmaker.TrackCaloLabel:    "pandoraGausCalo"
physics.producers.mycafmaker.TrackChi2PidLabel: "pandoraGausPid"
physics.producers.mycafmaker.SystWeightLabel:   "genieweight"

physics.producers.pandoraTrackMCSCryo0.TrackLabel: pandoraTrackGausCryo0
physics.producers.pandoraTrackMCSCryo1.TrackLabel: pandoraTrackGausCryo1

physics.producers.pandoraTrackRangeCryo0.TrackLabel: pandoraTrackGausCryo0
physics.producers.pandoraTrackRangeCryo1.TrackLabel: pandoraTrackGausCryo1

physics.producers.genieweight.weight_functions: @local::physics.producers.genieweight.weight_functions_genie

# Get the old geometry
services.Geometry.Name: icarus_splitwires
services.Geometry.GDML: "icarus_complete_20201107_no_overburden.gdml"
services.Geometry.ROOT: "icarus_complete_20201107_no_overburden.gdml"
