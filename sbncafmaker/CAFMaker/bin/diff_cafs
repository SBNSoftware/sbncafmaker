#!/usr/bin/env python

import argparse

parser = argparse.ArgumentParser(description="Prints out all fields that differ")
parser.add_argument("files", metavar="<FILE>.caf.root", nargs=2, help="2 files to compare")
parser.add_argument("-t", "--tolerance",   default=1e-20,  help="Tolerance for float comparison", metavar="TOL", type=float)
parser.add_argument("-i", "--ignore",  dest="ignore",      help="Regex pattern to ignore",        metavar="PAT", default=False)
parser.add_argument("-n", "--nevents", dest="nevents",     help="Number of events to compare",    metavar="NEVT", default=-1, type=int)

args = parser.parse_args()

import os, sys
import re
from ROOT import *

import inspect
import math

if args.ignore:
    ignorepat = re.compile(args.ignore)
else:
    ignorepat = None

fA = TFile.Open(args.files[0], 'READ')
fB = TFile.Open(args.files[1], 'READ')

trA = fA.Get('recTree')
trB = fB.Get('recTree')


def GetMembers(obj, prefix, res):
    for var in inspect.getmembers(obj):
        if var[0].startswith('__') or callable(var[1]): continue

        key = prefix+'.'+var[0]
        val = var[1]

        if callable(val): continue

        # Debug stack overflows by uncommenting this
        #    print(key, val, type(val))

        if isinstance(val, (int, long, float)):
            res[key] = val
        elif 'vector' in str(type(val)):
            res[key+'.size()'] = val.size()
            for i in range(0, val.size()):
                GetMembers(val.at(i), key+'['+str(i)+']', res)
        elif isinstance(val, TVector3):
            res[key] = (val.X(), val.Y(), val.Z())
        elif isinstance(val, TLorentzVector):
            res[key] = (val.E(), val.X(), val.Y(), val.Z())
        else:
            GetMembers(val, key, res)


def Equiv(a, b):
    if isinstance(a, float) and isinstance(b, float):
        if math.isnan(a) and math.isnan(b): return True
        if math.isinf(a) and math.isinf(b) and (a > 0) == (b > 0): return True
        return math.fabs(a-b) < args.tolerance

    if isinstance(a, tuple) and isinstance(b, tuple):
        if len(a) != len(b): return False
        for i in range(0, len(a)):
            if not Equiv(a[i], b[i]): return False
        return True

    return a == b


ret = 0 # zero exit code = success

if trA.GetEntries() != trB.GetEntries():
    print('Files have different numbers of entries:', trA.GetEntries(), 'vs', trB.GetEntries())
    ret = 1 # count differing lengths as failure

count = min(trA.GetEntries(), trB.GetEntries())
if args.nevents > 0:
    count = min(count, args.nevents)

for i in range(0, count):
    trA.GetEntry(i)
    trB.GetEntry(i)

    print('Checking record', i)

    resA = {}
    GetMembers(trA.rec, 'rec', resA)
    resB = {}
    GetMembers(trB.rec, 'rec', resB)

    for key in resB:
        if ignorepat and ignorepat.search(key): continue
        if not key in resA:
            print(' ', key, 'in file B not found in file A')

    for key in resA:
        if ignorepat and ignorepat.search(key): continue
        if not key in resB:
            print(' ', key, 'in file A not found in file B')
            continue

        valA = resA[key]
        valB = resB[key]
        if not Equiv(valA, valB):
            print(' ', key, 'differs:', valA, 'vs', valB)
            ret = 1 # return failure exit code

exit(ret)
