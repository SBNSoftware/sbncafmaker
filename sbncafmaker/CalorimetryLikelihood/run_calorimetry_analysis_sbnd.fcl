#include "services_sbnd.fcl"
#include "geometry_sbnd.fcl"
#include "larproperties.fcl"
#include "backtrackerservice.fcl"
#include "particleinventoryservice.fcl"
#include "detectorproperties_sbnd.fcl"
#include "photonbacktrackerservice.fcl"
#include "mccheatermodules.fcl"
#include "simulationservices_sbnd.fcl"

#include "flashmatch.fcl"
#include "mcsproducer.fcl"
#include "rangeproducer.fcl"
#include "calorimetry_sbnd.fcl"


process_name: CaloAna

services:
{
  @table::sbnd_detsim_services
  TimeTracker: {}
  RandomNumberGenerator: {} #ART native random number generator
  TFileService: { 
    fileName: "caloout.root"
  }
  message:      { debugModules: ["*"] destinations: { debugmsg:{type: "cout" threshold: "INFO"} } }
  TimeTracker:  { printSummary: true }
  AuxDetExptGeoHelperInterface: { service_provider: "sbndcode/CRT/CRTGeometryHelper" }
  ExptGeoHelperInterface:    @local::sbnd_geometry_helper
  Geometry:                  @local::sbnd_geo
  AuxDetGeometry:            @local::sbnd_auxdetgeo
  LArPropertiesService:      @local::standard_properties
  DetectorClocksService:     @local::sbnd_services.DetectorClocksService
  DetectorPropertiesService: @local::sbnd_detproperties
  ParticleInventoryService:  @local::standard_particleinventoryservice
  BackTrackerService:        @local::standard_backtrackerservice

}

# services.IFBeam: {}
# services.BackTracker: @local::standard_backtracker

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}

outputs:
{
  outpid:
  {
    module_type: RootOutput
    fileName:    "%ifb_%tc-%p.root"

    fastCloning: false
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  producers:{
    pandoraTrackMCS: @local::mcs_sbn
    pandoraTrackRange: @local::range_sbn
    pandoraCaloRE:         @local::sbnd_calomc
  }

  analyzers:
  {
    caloana: {
      module_type: CalorimetryAnalysis
      CALOproducer: "pandoraCalo"
      PIDproducer:  "pandoraPid"
      TRKproducer:  "pandoraTrack"
      ADCtoE: [] 
    }
  }

  #runprod: [ pandoraCaloRE, pandoraTrackMCS, pandoraTrackRange, caloana]
  runprod: [ pandoraTrackMCS, pandoraTrackRange, caloana]
  stream1:       [ ]
  trigger_paths: [ runprod ] 
  end_paths:     [ stream1 ]
}

physics.producers.pandoraCaloRE.SpacePointModuleLabel: pandora
physics.producers.pandoraCaloRE.TrackModuleLabel: pandoraTrack


#include "3drift_services_sbnd.fcl"
